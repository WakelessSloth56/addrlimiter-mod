buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

group = 'org.auioc.mcmod'
archivesBaseName = "addrlimiter"
version = "${minecraft_version}-${addrlimiter_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    runs {
        client {
            workingDirectory project.file('run')
            property 'file.encoding', 'UTF-8'
            property 'user.language', 'en'
            property 'log4j.configurationFile', 'log4j2.xml'
            mods {
                addrlimiter {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'file.encoding', 'UTF-8'
            property 'user.language', 'en'
            property 'log4j.configurationFile', 'log4j2.xml'
            mods {
                addrlimiter {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url "https://maven.pkg.github.com/auioc/arnicalib-mcmod"
        credentials {
            username = getVar("GITHUB_ACTOR") ? getVar("GITHUB_ACTOR") : getVar("GITHUB_USERNAME")
            password = getVar("GITHUB_TOKEN")
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation "org.auioc.mcmod:arnicalib:${minecraft_version}-${arnicalib_version}:forgelib"
}

ext {
    manifest_attributes = [
        "Specification-Title": 'addrlimiter',
        "Specification-Vendor": 'AUIOC',
        "Specification-Version": '1',
        "Implementation-Title": project.name,
        "Implementation-Version": "${addrlimiter_version}",
        "Implementation-Vendor" :'AUIOC',
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        "AddrLimiter-Version": "${archivesBaseName}-${version}-${getVar('CI_VERSION')}"
    ]
}

jar {
    manifest {attributes(manifest_attributes)}
}
jar.finalizedBy('reobfJar')

task forgelibJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.allJava
    classifier = 'forgelib'
    manifest {attributes(manifest_attributes)}
}
artifacts {
    archives forgelibJar
}

tasks.build.dependsOn('forgelibJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            artifact forgelibJar {
                classifier 'forgelib'
            }
        }
    }
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri('https://maven.pkg.github.com/auioc/addrlimiter-mcmod')
            credentials {
                username = getVar('GITHUB_ACTOR')
                password = getVar('GITHUB_TOKEN')
            }
        }
        maven {
            name = 'McmodsRepo'
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

task genUpdateJson() {
    doFirst {
        def j = [
            'homepage': 'https://github.com/auioc/addrlimiter-mcmod/releases',
            'promos': [
                    "${minecraft_version}-latest": "${addrlimiter_version}",
                    "${minecraft_version}-recommended": "${addrlimiter_version}",
            ]
        ]
        println(groovy.json.JsonOutput.toJson(j))
        File file = file("tmp/${minecraft_version}.json")
        file.write(groovy.json.JsonOutput.toJson(j))
    }
}


def getVar(String var_name) {
    return System.getenv(var_name)
}
